let FS = import("fs")
let Path = import("path")
let Str = import("str")

let projectHome = (Path.join(cwd(), rebo.args[1]) |> Path.dir()) + "/.."

let process(path, test, silent = false) {
   let formatCmdSegment(cmd) {
      cmd := cmd |> Str.replace("\n", " ")

      if len(cmd) > 70 -> cmd[0:70] + "..." | cmd
   }

   let execute(suite, path, startLine, endLine, code) {
      let cmd = "let __FILE = \"" + path + "\""
      let lp = 0

      while lp < len(code) -> {
         if Str.startsWith?(code[lp], ">") -> {
            let codeStartLine = startLine + lp + 1

            let cmdSegment = Str.trim(Str.dropStart(code[lp], 1))
            lp := lp + 1

            while lp < len(code) && Str.startsWith?(code[lp], ".") -> {
               cmdSegment := cmdSegment + "\n" + Str.trim(Str.dropStart(code[lp], 1))
               lp := lp + 1
            }

            cmd := cmd + " ; " + cmdSegment
            let result = eval(cmd, { scope: global() }) catch e -> e

            let expected = ""
            while lp < len(code) && !Str.startsWith?(code[lp], ">") -> {
               expected := Str.trim(expected + "\n" + code[lp])
               lp := lp + 1
            }
            
            if len(expected) > 0 -> {
               if typeof(result) == "Function" -> suite.eq(formatCmdSegment(cmdSegment), str(result), expected, cmd)
                | suite.eq(formatCmdSegment(cmdSegment), result, eval(expected), cmd)
            }
         } | {
            println("Error: ", path, ": ", startLine + lp, ": ", code[lp], " needed to start with '>'")
            exit(1)
         }
      }
   }

   let evalBendu(script, lineno) {
      let result = rebo.os.exec([
         "java", 
         "-jar",
         Path.join(projectHome, "components/compiler-kotlin/app/build/libs/app.jar"), 
         "test",
         "--expression", 
         script,
         "--bc",
         Path.join(projectHome, "components/bci-zig/zig-out/bin/bci-zig"),
         "--line",
         str(lineno)
      ])

      Str.trim(result.stdout) + Str.trim(result.stderr)
   }

   let executeBendu(suite, path, startLine, endLine, code) {      
      let script = join(code, "\\n")

      let result = evalBendu(script, startLine + 1) catch e -> e

      if result == "" -> suite.assert(Str.trim(code[0][1:]) + "...", true)
       | suite.eq(Str.trim(code[0][1:]) + "...", result, script)
   }

   let executeBenduError(suite, path, startLine, endLine, code) {      
      let script = join(code |> filter(fn(l) Str.startsWith?(l, ">")), "\\n")

      let result = evalBendu(script, startLine + 1) catch e -> e

      suite.eq(Str.trim(code[0][1:]) + "...", join(code |> filter(fn(l) !Str.startsWith?(l, ">")), "\\n"), result)
   }

   let newSuite = test.suite(path)

   let content = FS.lines(path)

   let lp = 0

   while lp < len(content) -> {
      if Str.startsWith?(content[lp], "```rebo-repl") ||  Str.startsWith?(content[lp], "``` rebo-repl") -> {
         let upper = lp + 1

         while upper < len(content) && !Str.startsWith?(content[upper], "```") ->
            upper := upper + 1

         execute(newSuite, path, lp + 1, upper, content[lp + 1 : upper])

         lp := upper + 1
      }
      | if Str.startsWith?(content[lp], "```bendu-repl") ||  Str.startsWith?(content[lp], "``` bendu-repl") -> {
         let upper = lp + 1

         while upper < len(content) && !Str.startsWith?(content[upper], "```") ->
            upper := upper + 1

         executeBendu(newSuite, path, lp + 1, upper, content[lp + 1 : upper])

         lp := upper + 1
      } | if Str.startsWith?(content[lp], "```bendu-error") ||  Str.startsWith?(content[lp], "``` bendu-error") -> {
         let upper = lp + 1

         while upper < len(content) && !Str.startsWith?(content[upper], "```") ->
            upper := upper + 1

         executeBenduError(newSuite, path, lp + 1, upper, content[lp + 1 : upper])

         lp := upper + 1
      } | {
         lp := lp + 1
      }
   }

   newSuite.report(false, silent)
}
