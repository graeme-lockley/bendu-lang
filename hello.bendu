import "./lib/Data/Option.bendu" as Option
import "./lib/Data/String.bendu" as String

type List*[a] = Nil | Cons[a, List[a]]

let value = Cons(1, Nil())

let range*(n) = {
  let helper(i) =
    if i > n -> Nil() 
     | Cons(i, helper(i + 1))

  helper(0)
}

let fold*(xs, f, z) =
  match xs with
  | Nil() -> z
  | Cons(c, cs) -> fold(cs, f, f(z, c))

let foldr*(xs, f, z) =
  match xs with
  | Nil() -> z
  | Cons(c, cs) -> f(c, foldr(cs, f, z))

let sum*(xs) =
  foldr(xs, fn(a, b) = a + b, 0)

println(sum(range(10)))

type Option = Left | Right | Both

let f(n, op) =
  match (n, op) with
  | (Option.None(), _) -> []
  | (Option.Some(x), Left()) -> x!:1
  | (Option.Some(x), Right()) -> x!3:
  | (Option.Some(x), Both()) -> x!1:3

println(f(Option.None(), Left()))

println(f(Option.Some([1, 2, 3, 4, 5]), Left()))

println(f(Option.Some([1, 2, 3, 4, 5]), Right()))

println(f(Option.Some([1, 2, 3, 4, 5]), Both()))

println(Option.withDefault(100, Option.Some(42)))
println(Option.withDefault(100, Option.None()))

println(String.length("hello"))

let v1 = Option.Some(10)
let v2 = Option.Some(20)
let vv = match v1 with
  | Option.None() -> 0
  | Option.Some(n1) -> { match v2 with
    | Option.None() -> 0
    | Option.Some(n2) -> n1 + n2 }

println(vv, ": ", @vv)


let lst = [1, 2, 3, 4, 5]
println(lst, ": ", @lst)