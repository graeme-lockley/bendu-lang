#!/usr/bin/env rebo

rebo.lang["import.verbose"] := false

let FS = import("fs")
let JSON = import("json")
let Path = import("path")
let Str = import("str")

let projectHome = (Path.join(cwd(), rebo.args[1]) |> Path.dir()) + "/.."

let instructionsFileName = Path.join(projectHome, "docs/bytecode-instructions.json")
let instructions = FS.readFile(instructionsFileName) |> JSON.parse()

let zigFileName = "components/bci-zig/src/op.zig"
let fullZigFileName = Path.join(projectHome, zigFileName)

if !fexists(fullZigFileName) || rebo.os.fstat(fullZigFileName).mtime < rebo.os.fstat(instructionsFileName).mtime -> {
    let zigOut = ["pub const Op = enum(u8) {"]
    each(instructions.instructions, fn (instruction) zigOut <! "    " + Str.lower(instruction.name) + ",")
    zigOut <! "};"
        
    println("Writing to "+ zigFileName)
    FS.writeFile(fullZigFileName, zigOut |> join("\n"))
}

let kotlinFileName = "components/compiler-kotlin/app/src/main/kotlin/io/littlelanguages/bendu/compiler/Instructions.kt"
let fullKotlinFileName = Path.join(projectHome, kotlinFileName)
    
if !fexists(fullKotlinFileName) || rebo.os.fstat(fullKotlinFileName).mtime < rebo.os.fstat(instructionsFileName).mtime -> {
    let kotlinOut = [
        "package io.littlelanguages.bendu.compiler",
        "",
        "enum class Args {U32, U32A, I32, F32, STRING, U8}",
        "",
        "enum class Instructions(val op: Byte, val args: List<Args>) {"
    ]

    let mapArgument(a) =
        if a == "[]u32" -> "U32A"
         | Str.upper(a)

    each(instructions.instructions, fn (instruction, idx) kotlinOut <! "    " + Str.upper(instruction.name) + "(" + str(idx) + ", listOf(" + join(map(instruction.args, fn(a) "Args." + mapArgument(a.type)), ", ") + ")),")
    kotlinOut <! "}"

    println("Writing to "+ kotlinFileName)
    FS.writeFile(fullKotlinFileName, kotlinOut |> join("\n"))
}
