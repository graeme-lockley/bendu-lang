{
  "instructions": [
    {
      "name": "ABORT",
      "args": [
        {
          "name": "error_code",
          "type": "u32"
        }
      ],
      "description": "Aborts the program with a specified error code."
    },
    {
      "name": "PUSH_BOOL_TRUE",
      "args": [],
      "description": "Places the value 'true' onto the stack."
    },
    {
      "name": "PUSH_BOOL_FALSE",
      "args": [],
      "description": "Places the value 'false' onto the stack."
    },
    {
      "name": "PUSH_CLOSURE",
      "args": [
        {
          "name": "offset",
          "type": "u32"
        },
        {
          "name": "frame",
          "type": "u32"
        }
      ],
      "description": "Create a closure for a function with the frame.  The frame, starting at 0 indicates how many frames to traverse to get to the correct frame."
    },
    {
      "name": "PUSH_F32_LITERAL",
      "args": [
        {
          "name": "literal_value",
          "type": "f32"
        }
      ],
      "description": "Adds a specified float to the stack."
    },
    {
      "name": "PUSH_I32_LITERAL",
      "args": [
        {
          "name": "literal_value",
          "type": "i32"
        }
      ],
      "description": "Adds a specified integer to the stack."
    },
    {
      "name": "PUSH_STRING_LITERAL",
      "args": [
        {
          "name": "literal_value",
          "type": "string"
        }
      ],
      "description": "Adds a specified char to the stack."
    },
    {
      "name": "PUSH_TUPLE",
      "args": [
        {
          "name": "arity",
          "type": "u32"
        }
      ],
      "description": "Creates a tuple from the top arity number of values on the stack."
    },
    {
      "name": "PUSH_TUPLE_COMPONENT",
      "args": [
        {
          "name": "index",
          "type": "u32"
        }
      ],
      "description": "Pushes the component at the specified index of the tuple at the top of the stack."
    },
    {
      "name": "PUSH_U8_LITERAL",
      "args": [
        {
          "name": "literal_value",
          "type": "u8"
        }
      ],
      "description": "Adds a specified char to the stack."
    },
    {
      "name": "PUSH_UNIT_LITERAL",
      "args": [],
      "description": "Pushes a unit value onto the stack."
    },
    {
      "name": "PUSH_STACK",
      "args": [
        {
          "name": "stack_index",
          "type": "u32"
        }
      ],
      "description": "Pushes a value from a specific position in the stack onto the top."
    },
    {
      "name": "LOAD",
      "args": [
        {
          "name": "frame",
          "type": "u32"
        },
        {
          "name": "offset",
          "type": "u32"
        }
      ],
      "description": "Load the value at the offset from the frame onto the stack. The frame, starting at 0 indicates how many frames to traverse to get to the correct frame. The offset is the offset from the start of the frame."
    },
    {
      "name": "STORE",
      "args": [
        {
          "name": "frame",
          "type": "u32"
        },
        {
          "name": "offset",
          "type": "u32"
        }
      ],
      "description": "Store the value on the stack into the frame at the offset.  The frame, starting at 0 indicates how many frames to traverse to get to the correct frame. The offset is the offset from the start of the frame."
    },
    {
      "name": "DUP",
      "args": [],
      "description": "Duplicates the top of the stack."
    },
    {
      "name": "DISCARD",
      "args": [],
      "description": "Removes the top element from the stack."
    },
    {
      "name": "JMP",
      "args": [
        {
          "name": "offset",
          "type": "u32"
        }
      ],
      "description": "Jumps to the given instruction offset."
    },
    {
      "name": "JMP_FALSE",
      "args": [
        {
          "name": "offset",
          "type": "u32"
        }
      ],
      "description": "Removes the top boolean from the stack and jumps to a given instruction offset if the value is 'false'."
    },
    {
      "name": "JMP_DUP_FALSE",
      "args": [
        {
          "name": "offset",
          "type": "u32"
        }
      ],
      "description": "Jumps to a given instruction offset if the top value of the stack is 'false', without modifying the stack."
    },
    {
      "name": "JMP_DUP_TRUE",
      "args": [
        {
          "name": "offset",
          "type": "u32"
        }
      ],
      "description": "Jumps to a given instruction offset if the top value of the stack is 'true', without modifying the stack."
    },
    {
      "name": "CALL",
      "args": [
        {
          "name": "function_offset",
          "type": "u32"
        },
        {
          "name": "arity",
          "type": "u32"
        },
        {
          "name": "frame",
          "type": "u32"
        }
      ],
      "description": "Call the function at offset with the arity number of arguments from the stack. The frame, starting at 0 indicates how many frames to traverse to get to the correct frame. A new frame is created for the function call and the arguments are stored in the frame. These arguments are removed from the call stack and replaced with the return address and the new frame pointer."
    },
    {
      "name": "CALL_CLOSURE",
      "args": [
        {
          "name": "arity",
          "type": "u32"
        }
      ],
      "description": "Call the closure on the stack with following arity number of arguments also located on the stack. The arguments are removed from the call stack and replaced with the return address and the new frame pointer."
    },
    {
      "name": "RET",
      "args": [ ],
      "description": "Returns from the current function, keeping the value at the top of the stack and popping the specified number of arguments from the stack immediately the stack top."
    },
    {
      "name": "NOT_BOOL",
      "args": [],
      "description": "Removes the top boolean from the stack, negates it, and pushes the result back onto the stack."
    },
    {
      "name": "ADD_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, adds them, and pushes the result onto the stack."
    },
    {
      "name": "ADD_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, adds them, and pushes the result onto the stack."
    },
    {
      "name": "ADD_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, concatenates them , and pushes the result onto the stack."
    },
    {
      "name": "ADD_U8",
      "args": [],
      "description": "Removes the top bytes from the stack, adds them, and pushes the result onto the stack."
    },
    {
      "name": "SUB_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, subtracts the second from the first, and pushes the result onto the stack."
    },
    {
      "name": "SUB_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, subtracts the second from the first, and pushes the result onto the stack."
    },
    {
      "name": "SUB_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, subtracts the second from the first, and pushes the result onto the stack."
    },
    {
      "name": "MUL_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, multiplies them, and pushes the result onto the stack."
    },
    {
      "name": "MUL_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, multiplies them, and pushes the result onto the stack."
    },
    {
      "name": "MUL_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, multiplies them, and pushes the result onto the stack."
    },
    {
      "name": "DIV_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, divides the first by the second, and pushes the result onto the stack."
    },
    {
      "name": "DIV_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, divides the first by the second, and pushes the result onto the stack."
    },
    {
      "name": "DIV_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, divides the first by the second, and pushes the result onto the stack."
    },
    {
      "name": "MOD_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, computes the modulus, and pushes the result onto the stack."
    },
    {
      "name": "POW_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, raises the first to the power of the second, and pushes the result onto the stack."
    },
    {
      "name": "POW_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, raises the first to the power of the second, and pushes the result onto the stack."
    },
    {
      "name": "EQ_BOOL",
      "args": [],
      "description": "Removes the top two boolean values from the stack, checks if they are equal, and pushes the result onto the stack."
    },
    {
      "name": "EQ_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, checks if they are equal, and pushes the result onto the stack."
    },
    {
      "name": "EQ_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, checks if they are equal, and pushes the result onto the stack."
    },
    {
      "name": "EQ_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, checks if they are equal, and pushes the result onto the stack."
    },
    {
      "name": "EQ_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, checks if they are equal, and pushes the result onto the stack."
    },
    {
      "name": "EQ_UNIT",
      "args": [],
      "description": "Removes the top two unit values from the stack and pushes True onto the stack."
    },
    {
      "name": "NEQ_BOOL",
      "args": [],
      "description": "Removes the top two boolean values from the stack, checks if they are not equal, and pushes the result onto the stack."
    },
    {
      "name": "NEQ_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, checks if they are not equal, and pushes the result onto the stack."
    },
    {
      "name": "NEQ_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, checks if they are not equal, and pushes the result onto the stack."
    },
    {
      "name": "NEQ_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, checks if they are not equal, and pushes the result onto the stack."
    },
    {
      "name": "NEQ_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, checks if they are not equal, and pushes the result onto the stack."
    },
    {
      "name": "NEQ_UNIT",
      "args": [],
      "description": "Removes the top two unit values from the stack and pushes False onto the stack."
    },
    {
      "name": "LT_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, checks if the first is less than the second, and pushes the result onto the stack."
    },
    {
      "name": "LT_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, checks if the first is less than the second, and pushes the result onto the stack."
    },
    {
      "name": "LT_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, checks if the first is less than the second, and pushes the result onto the stack."
    },
    {
      "name": "LT_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, checks if the first is less than the second, and pushes the result onto the stack."
    },
    {
      "name": "LE_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, checks if the first is less than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "LE_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, checks if the first is less than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "LE_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, checks if the first is less than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "LE_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, checks if the first is less than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "GT_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, checks if the first is greater than the second, and pushes the result onto the stack."
    },
    {
      "name": "GT_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, checks if the first is greater than the second, and pushes the result onto the stack."
    },
    {
      "name": "GT_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, checks if the first is greater than the second, and pushes the result onto the stack."
    },
    {
      "name": "GT_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, checks if the first is greater than the second, and pushes the result onto the stack."
    },
    {
      "name": "GE_F32",
      "args": [],
      "description": "Removes the top two floats from the stack, checks if the first is greater than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "GE_I32",
      "args": [],
      "description": "Removes the top two integers from the stack, checks if the first is greater than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "GE_STRING",
      "args": [],
      "description": "Removes the top two strings from the stack, checks if the first is greater than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "GE_U8",
      "args": [],
      "description": "Removes the top two bytes from the stack, checks if the first is greater than or equal to the second, and pushes the result onto the stack."
    },
    {
      "name": "PRINTLN",
      "args": [],
      "description": "Outputs a newline while leaving the stack unchanged."
    },
    {
      "name": "PRINT_BOOL",
      "args": [],
      "description": "Outputs the boolean value at the top of the stack and removes it from the stack."
    },
    {
      "name": "PRINT_U8",
      "args": [],
      "description": "Outputs the u8 value at the top of the stack and removes it from the stack."
    },
    {
      "name": "PRINT_F32",
      "args": [],
      "description": "Outputs the f32 value at the top of the stack and removes it from the stack."
    },
    {
      "name": "PRINT_I32",
      "args": [],
      "description": "Outputs the integer value at the top of the stack and removes it from the stack."
    },
    {
      "name": "PRINT_STRING",
      "args": [],
      "description": "Outputs the string value at the top of the stack and removes it from the stack."
    },
    {
      "name": "PRINT_UNIT",
      "args": [],
      "description": "Outputs the unit value at the top of the stack and removes it from the stack."
    }
  ]
}
