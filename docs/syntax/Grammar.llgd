uses "./Scanner.llld";

Module
    : {Declaration {";"}}
    ;

Declaration
    : TypeDeclaration
    | Expression
    ;

TypeDeclaration
    : "type" UpperID [TypeNameBindings] = Type
    ;

TypeNameBindings: "[" LowerID [":" Type] {"," LowerID [":" Type]} "]";

Type: TypeFunction {"|" TypeFunction};
TypeFunction: TypeTuple {"->" TypeTuple};
TypeTuple: TypeTerm {"*" TypeTerm};
TypeTerm: LowerID | UpperID {Type} | "(" Type ")" | "{" [LowerID [":" Type] {"," LowerID [":" Type]} "," "..."] | "..." "}";

Expression
    : "let" DeclarationExpression {"and" DeclarationExpression}
    | "if" ["|"] Expression "->" Expression {"|" Expression "->" Expression}
    | "while" Expression "->" Expression
    | "match" Expression ["|"] MatchCase {"|" MatchCase}
    | "raise" Expression
    | Catch [":=" Expression]
    ;

DeclarationExpression
    : Pattern "=" Expression
    | Identifier ["!"] ["+"] FunctionTail
    ;

MatchCase
    : Pattern "->" Expression
    ;

Pattern
    : "(" [Pattern] ")"
    | Identifier ["*"] [":" Type]
    | LiteralChar
    | LiteralFloat
    | LiteralInt
    | LiteralString
    | "[" [Pattern {"," Pattern} ["," "..." Identifier]] "]" ["@" Identifier]
    | "{" [MapPattern {"," MapPattern} ["," "..." Identifier]] "}" ["@" Identifier]
    | "true" 
    | "false"
    ;

MapPattern
    : [LiteralString | Identifier] [":" Pattern]
    ;

Catch
    : Pipe ["catch" ["|"] MatchCase {"|" MatchCase}]
    ;

Pipe
    : Or {"|>" Or}

Or
    : And {"||" And}
    ;

And
    : Equality {"&&" Equality}
    ;

Equality
    : Starpend [("==" | "!=" | "<" | "<=" | ">" | ">=") Starpend]
    ;

Starpend
    : Additive {(">>" | ">!" | "<<" | "<!") Additive}
    ;

Additive
    : Multiplicative {["+" | "-"] Multiplicative}
    ;

Multiplicative
    : Power {["*" | "/" | "%"] Power}
    ;

Power
    : NullDefault {"**" NullDefault}
    ;

NullDefault
    : Qualifier ["?" Qualifier]
    ;

Qualifier
    : Factor { FactorSuffix }
    ;

FactorSuffix
    : "(" [Expression {"," Expression}] ")"
    | "[" (Expression | [Expression] ":" [Expression]) "]"
    | "." Identifier
    ;

Factor
    : "(" [Expression] ")"
    | "{" [RecordItem {"," RecordItem}]"}"
    | "{" Expression {";" Expression} "}"
    | Identifier [":" Type]
    | "false"
    | "true"
    | LiteralChar
    | LiteralFloat
    | LiteralInt
    | LiteralString
    | "[" [Expression {"," ["..."] Expression}] "]"
    | "fn" FunctionTail
    | "!" Qualifier
    ;

FunctionTail
    : [TypeNameBindings] Parameters [":" Type] ["="] Expression
    ;

RecordItem
    : [LiteralString | Identifier] ":" Expression
    | "..." Expression
    ;

Parameters
    : "(" [(Parameter {"," Parameter} ["," "..." Identifier]) | ("..." Identifier)] ")"
    ;

Parameter
    : Identifier [":" Type] ["=" Expression]
    ;
