uses "./Scanner.llld";

Program
    : {ImportStatement [";"]} {Expression [";"]}
    ;

ImportStatement
    : "import" LiteralString
    ;

Expression
    : "let" LetDeclaration {"and" LetDeclaration}
    | "print" "(" [Expression {"," Expression}] ")"
    | "println" "(" [Expression {"," Expression}] ")"
    | "abort" "(" [Expression {"," Expression}] ")"
    | "if" ["|"] Expression "->" Expression {"|" Expression ["->" Expression]}
    | "while" Expression "->" Expression
    | OrExpression
    ;

LetDeclaration
    : LowerID ["!"] [TypeParameters] [FunctionParameters] [TypeQualifier] "=" Expression
    ;

OrExpression
    : Or
    ;

Or
    : AndE {"||" AndE}
    ;

AndE
    : Equality {"&&" Equality}
    ;

Equality
    : Starpend [RelOp Starpend]
    ;

RelOp
    : "=="
    | "!="
    | "<"
    | "<="
    | ">"
    | ">="
    ;

Starpend
    : Additive {StarpendOp Additive}
    ;

StarpendOp
    : ">>"
    | ">!"
    | "<<"
    | "<!"
    ;

Additive
    : Multiplicative {("+" | "-") Multiplicative}
    ;

Multiplicative
    : Power {("*" | "/" | "%") Power}
    ;

Power
    : TypedExpression {"**" TypedExpression}
    ;

TypedExpression
    : Assignment [":" TypeTerm]
    ;

Assignment
    : QualifiedExpression [":=" Expression]
    ;

QualifiedExpression
    : Factor {QualifiedExpressionSuffix}
    ;

QualifiedExpressionSuffix
    : "(" [Expression {"," Expression}] ")"
    | "!" (QualifiedExpression [":" [QualifiedExpression]] | ":" [QualifiedExpression])
    ;

Factor
    : "(" [Expression {"," Expression}] ")"
    | LowerID
    | LiteralChar
    | LiteralFloat
    | LiteralInt
    | LiteralString
    | "True"
    | "False"
    | "!" Factor
    | "@" Factor
    | "fn" [TypeParameters] FunctionParameters [TypeQualifier] ["="] Expression
    | "{" {Expression [";"]} "}"
    | "[" [["..."] Expression {"," ["..."] Expression}] "]"
    ;

FunctionParameters
    : "(" [FunctionParameter {"," FunctionParameter}] ")"
    ;

FunctionParameter
    : LowerID ["!"] [TypeQualifier]
    | "_" [TypeQualifier]
    | "(" FunctionParameter {"," FunctionParameter} ")" [TypeQualifier]
    ;

TypeParameters
    : "[" LowerID {"," LowerID} "]"
    ;

TypeQualifier
    : ":" TypeTerm
    ;

TypeTerm
    : TypeFactor {"*" TypeFactor}
    ;

TypeFactor
    : "(" [TypeTerm {"," TypeTerm}] ")" ["->" TypeTerm]
    | UpperID ["[" TypeTerm {"," TypeTerm} "]"]
    | LowerID
    ;
